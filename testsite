<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="polarfavicon.png" type="image/png">
    <title>Polar</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        :root {
            --light-bg: #f5f3f5;
            --dark-bg: #13293D;
            --light-text: #13293D;
            --dark-text: #f5f3f5;
            --border-color: #13293D;
            --light-border: #13293D;
            --dark-border: #f5f3f5;
            --typing-indicator-color: gray;
            --online-status-color: green;
            --offline-status-color: red;
            --input-bg: #fff;
            --input-text-color: #13293D;
        }

        body {
            font-family: 'Josefin Sans', sans-serif;
            background-color: var(--light-bg);
            color: var(--light-text);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        body.dark {
            background-color: var(--dark-bg);
            color: var(--dark-text);
            --input-bg: #1F2937;
            --input-text-color: #f5f3f5;
        }

        .chat-container {
            transition: background-color 0.3s ease;
        }

        .message-input {
            transition: background-color 0.3s ease, color 0.3s ease;
            border: 1px solid var(--light-border);
            border-radius: 0.375rem;
            padding: 0.5rem;
            background-color: var(--input-bg);
            color: var(--input-text-color);
        }

        #send-message {
            transition: background-color 0.3s ease, color 0.3s ease;
            background-color: var(--light-text);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.375rem;
            cursor: pointer;
            display: flex;
            align-items: center; /* Center text vertically */
            justify-content: center; /* Center text horizontally */
            min-width: 100px; /* Ensure a minimum width for the button */
        }

        body.dark #send-message {
            background-color: var(--dark-border);
            color: #13293D;
        }

        ::-webkit-scrollbar {
            width: 12px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background-color: var(--light-bg);
            border-radius: 20px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background-color: #e1e1e1;
        }

        * {
            scrollbar-width: thin;
            scrollbar-color: var(--light-bg) transparent;
        }

        .message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 20px;
            max-width: 70%;
            position: relative;
        }

        .message.bubble {
            background: var(--light-bg);
            color: var(--light-text);
            border-radius: 20px 20px 20px 0;
            align-self: flex-start;
        }

        .message.bubble.sent {
            background: var(--light-text);
            color: var(--dark-text);
            border-radius: 20px 20px 0 20px;
            align-self: flex-end;
        }

        .typing-indicator {
            font-style: italic;
            color: var(--typing-indicator-color);
            display: none;
        }

        .online-status {
            width: 10px;
            height: 10px;
            background-color: var(--online-status-color);
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }

        .offline-status {
            background-color: var(--offline-status-color);
        }

        /* Align logo and text */
        .header {
            display: flex;
            align-items: center;
        }

        #polar-logo {
            margin-right: 0.5rem; /* Space between logo and text */
        }

        .profiles-container {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .profile-card {
            border: 1px solid var(--light-border);
            border-radius: 8px;
            padding: 10px;
            margin: 5px;
            text-align: center;
            background-color: var(--light-bg);
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .profile-card:hover {
            background-color: #e2e2e2;
        }

        .profile-card img {
            border-radius: 50%;
            width: 50px;
            height: 50px;
        }
    </style>
</head>
<body>
    <div class="container mx-auto p-4">
        <div class="flex items-start mb-4">
            <div class="header">
                <img src="polar1.png" alt="Polar Logo" class="w-16 h-16" id="polar-logo">
                <h1 class="text-center text-3xl font-bold mb-4">Polar</h1>
            </div>
            <div class="flex flex-col items-end ml-auto">
                <div id="user-status" class="online-status"></div>
                <img id="user-pfp" src="" alt="Profile Picture" class="w-16 h-16 rounded-full mb-2 hidden">
                <div id="user-info" class="text-right hidden">
                    <span id="user-name" class="font-bold text-lg"></span>
                    <div id="user-bio" class="text-sm text-gray-600"></div>
                </div>
            </div>
        </div>

        <button id="toggle-theme" class="text-2xl mb-2">ðŸŒ™</button>

        <div class="profiles-container" id="profiles-container">
            <!-- User profiles will be dynamically inserted here -->
        </div>

        <div id="chat-container" class="chat-container mb-4">
            <div id="messages" class="bg-white dark:bg-[#13293D] rounded-lg p-4 max-h-80 overflow-y-auto border border-[#13293D] dark:border-[#f5f3f5]">
            </div>
            <div id="typing-indicator" class="typing-indicator"></div>
        </div>

        <div class="flex">
            <input id="message-input" type="text" placeholder="Type your message here..." class="message-input flex-grow">
            <button id="send-message">Send</button>
        </div>
    </div>

    <script>
        const userData = {
            "Huzaim Malik": {
                bio: "Engineer Mans",
                pfp: "Huzaim Malik.jpg"
            },
            "Mussab Zaheer": {
                bio: "Cat Man",
                pfp: "Mussab Zaheer.jpg"
            },
            "Muhammad Izaan": {
                bio: "Had a weird haircut in O1",
                pfp: "Muhammad Izaan.jpg"
            },
            "Daraab Ahmed": {
                bio: "Somehow supports Chelsea",
                pfp: "Daraab Ahmed.jpg"
            },
            "Fattir Ahmed": {
                bio: "Picture mans",
                pfp: "Fattir Ahmed.jpg"
            },
            "Abdullah Farooq": {
                bio: "Never shows up",
                pfp: "farooq.jpg"
            },
            "Harris Mahmood": {
                bio: "The Prince from Denmark",
                pfp: "harrassment.jpg"
            },
            "Touseeq Haider": {
                bio: "Abu Osman",
                pfp: "touseeq.jpg"
            },
            "Danish Haider": {
                bio: "tiny asl",
                pfp: "danish.jpg"
            },
            "Darain": {
                bio: "dumbass",
                pfp: "Drain.jpg"
            },
            // O2 Kids:
            "Irfan": {
                bio: "dumbass^2",
                pfp: "irfan.jpg"
            },
            "Bukhari": {
                bio: "impeccable hair",
                pfp: "bukhari.jpg"
            },
            "Rayyan Mirza": {
                bio: "skibidi",
                pfp: "mirza.jpg"
            },
            "Ezaaz": {
                bio: "ion even know",
                pfp: "ezaaz.jpg"
            },
            "Ibrahim Mobeen": {
                bio: ":thumbsup:",
                pfp: "ibrahim.jpg"
            }
        };

        const profilesContainer = document.getElementById("profiles-container");
        const userInfo = document.getElementById("user-info");
        const userName = document.getElementById("user-name");
        const userBio = document.getElementById("user-bio");
        const userPfp = document.getElementById("user-pfp");

        // Function to display all user profiles
        function displayProfiles() {
            for (const [name, data] of Object.entries(userData)) {
                const profileCard = document.createElement("div");
                profileCard.classList.add("profile-card");
                profileCard.innerHTML = `
                    <img src="${data.pfp}" alt="${name} Profile Picture">
                    <h3>${name}</h3>
                `;
                profileCard.addEventListener("click", () => displayUserInfo(name));
                profilesContainer.appendChild(profileCard);
            }
        }

        // Function to display selected user info
        function displayUserInfo(name) {
            const data = userData[name];
            userName.textContent = name;
            userBio.textContent = data.bio;
            userPfp.src = data.pfp;
            userPfp.classList.remove("hidden");
            userInfo.classList.remove("hidden");
        }

        // Call the function to display profiles
        displayProfiles();
        
        // Chat function (unchanged from your original)
        const messagesContainer = document.getElementById('messages');
        const messageInput = document.getElementById('message-input');
        const sendMessageButton = document.getElementById('send-message');
        const typingIndicator = document.getElementById('typing-indicator');
        let typingTimeout;

        // Function to send message
        function sendMessage() {
            const messageText = messageInput.value.trim();
            if (messageText) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message', 'bubble', 'sent');
                messageElement.textContent = messageText;
                messagesContainer.appendChild(messageElement);
                messageInput.value = '';
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }

        // Event listeners
        sendMessageButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
            // Show typing indicator
            clearTimeout(typingTimeout);
            typingIndicator.style.display = 'block';
            typingTimeout = setTimeout(() => {
                typingIndicator.style.display = 'none';
            }, 1000);
        });

        // Theme toggle functionality
        const toggleThemeButton = document.getElementById('toggle-theme');
        toggleThemeButton.addEventListener('click', () => {
            document.body.classList.toggle('dark');
            toggleThemeButton.textContent = document.body.classList.contains('dark') ? 'ðŸ”…' : 'ðŸŒ™';
            // Save theme preference in local storage
            localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
        });

        // Load saved theme from local storage
        window.addEventListener('load', () => {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.body.classList.add('dark');
                toggleThemeButton.textContent = 'ðŸ”…';
            } else {
                document.body.classList.remove('dark');
                toggleThemeButton.textContent = 'ðŸŒ™';
            }
        });
    </script>
</body>
</html>
